{"version":3,"file":"js/599.9a19e517.js","mappings":"0HAEA,MACMA,EAAQ,CACVC,YAAY,EACZD,MAAO,CACHE,cAAe,CAKX,CACI,MAAS,QACT,MAAS,KAEb,CACI,MAAS,oBACT,MAAS,KAEb,CACI,MAAS,gBACT,MAAS,KAEb,CACI,MAAS,gBACT,MAAS,MAGjBC,sBAAuB,OACvBC,QAAS,GACTC,MAAO,KACPC,YAAY,EACZC,eAAgB,aAChBC,mBAAoB,GACpBC,iBAAiB,EACjBC,QAAS,IAgCbC,UAAW,CACPC,UAAUZ,EAAOa,GACbb,EAAMa,EAAOC,KAAOD,EAAOE,OAE/BC,YAAYhB,EAAOU,MAQvBO,QAAS,CACLC,YAAW,OAACC,GAAST,GACjBS,EAAO,cAAeT,IAE1BU,UAAS,OAACD,GAASN,GACfM,EAAO,YAAaN,IAExBQ,0BAAyB,MAACrB,EAAD,SAAQsB,GAAWT,GACxC,IAAIU,GAAeC,EAAAA,EAAAA,IAAMxB,EAAMG,uBAC3BsB,EAAY,CACZpB,MAAOkB,EAAalB,OAGpBqB,QAAUJ,EAAS,sBAAuBG,EAAW,CAACE,MAAM,UAClDL,EAAS,gCAAiCI,EAAG,CAACC,MAAM,IAElE,OAAOD,GAEXE,uBAAsB,MAAC5B,GAAQa,GAC3Bb,EAAMO,eAAiBM,EAAOgB,UAElCC,eAAc,MAAC9B,EAAD,SAAQsB,IAClB,IAAIlB,EAAUJ,EAAMI,QACpB,IAAK,IAAI2B,KAAK3B,SACHA,EAAQ2B,GAKnBC,aAAaC,WAAW,sBACxBD,aAAaE,QAAQ,sBAAuB,KAC5CF,aAAaC,WAAWjC,EAAMG,wBAElCgC,gBAAe,MAACnC,EAAD,SAAQsB,GAAWT,GAC9B,IAAIT,EAAUJ,EAAMI,QACpB,IAAK,IAAI2B,KAAKlB,EACVT,EAAQ2B,GAAKlB,EAAOkB,GAExB/B,EAAMM,YAAa,GACnB8B,EAAAA,EAAAA,IAAMpC,EAAMG,sBAAuBC,KAI3CiC,QAAS,CACLC,gBAAiBtC,GACNA,EAAMM,WAEjBiC,cAAgBvC,GAAWwC,IAChBhB,EAAAA,EAAAA,IAAMxB,EAAMG,uBAAuB,WAAWsC,eAAeD,GAExEE,uBAAwB1C,GAAU2C,KAC1BA,GACa,GAANA,EAIfC,+BAAgC5C,GAAU2C,KAClCA,GACa,GAANA,EAIfE,uBAAwB7C,GAAU2C,KAC1BA,GACa,GAANA,EAIfG,kBAAmB9C,GAAU2C,KACrBA,GACa,GAANA,EAIfI,WAAY/C,GAC2B,GAA5BA,EAAMI,QAAQ4C,WAEzBC,eAAgBjD,GACuB,GAA5BA,EAAMI,QAAQ4C,WAEzBE,uBAAwBlD,GACe,GAA5BA,EAAMI,QAAQ4C,WAEzBG,eAAgBnD,GACuB,GAA5BA,EAAMI,QAAQ4C,WAEzBI,UAAWpD,GAC4B,GAA5BA,EAAMI,QAAQ4C,aAKjC","sources":["webpack://cms/./src/Modules/App/User/store/state.js"],"sourcesContent":["import {setLS, getLS} from 'devegram-javascript-util';\n\nconst baseApiUrl = '/xapi/individual/user';\nconst state = {\n    namespaced: true,\n    state: {\n        usersProfiles: [\n            /*{\n                'label': 'Root',\n                'value': '1'\n            },*/\n            {\n                'label': 'Admin',\n                'value': '2'\n            },\n            {\n                'label': 'Platform Employee',\n                'value': '4'\n            },\n            {\n                'label': 'VoIP Reseller',\n                'value': '5'\n            },\n            {\n                'label': 'VoIP Customer',\n                'value': '6'\n            }\n        ],\n        user_localstorage_key: 'user',\n        profile: {},\n        token: null,\n        isVerified: false,\n        afterLoginPath: '/dashboard',\n        usersFusionServers: {},\n        useLocalModules: false,\n        modules: {\n            /*email: {\n                account: {\n                    features:{}\n                },\n                mail: {\n                    features:{}\n                },\n            },\n            Ecommerce: {\n                Brand: {\n                }\n            },*/\n            /*App: [\n                {\n                    name: 'Module',\n                    group_name: 'system-gears',\n                    features: {}\n                },\n            ],\n            Individual: [\n                {\n                    name: 'Profile',\n                    group_name: 'other',\n                },\n                {\n                    name: 'ProfileModule',\n                    group_name: 'other',\n                }\n            ],*/\n        }\n    },\n    mutations: {\n        SET_STATE(state, params) {\n            state[params.key] = params.value\n        },\n        ADD_MODULES(state, modules) {\n            /* state.modules = {\n                 ...state.modules,\n                 ...modules\n             }\n             console.log('NEW MODULES', state.modules)*/\n        },\n    },\n    actions: {\n        addModules({commit}, modules) {\n            commit('ADD_MODULES', modules)\n        },\n        setState({commit}, params) {\n            commit('SET_STATE', params)\n        },\n        async verifySavedProfile({state, dispatch}, params) {\n            let savedProfile = getLS(state.user_localstorage_key)\n            let verifyAPI = {\n                token: savedProfile.token\n            };\n\n            let r = await dispatch('App-User-api/verify', verifyAPI, {root: true});\n            let a = await dispatch('App-User-state/setProfileInfo', r, {root: true})\n\n            return r;\n        },\n        setAfterLoginLocation({state}, params) {\n            state.afterLoginPath = params.location\n        },\n        clearUserData({state, dispatch}) {\n            let profile = state.profile\n            for (let x in profile) {\n                delete profile[x]\n            }\n\n            /*state.modules = {}\n            window.$hkms.modules = {}*/\n            localStorage.removeItem('ajax_manager_token')\n            localStorage.setItem('redirected_to_login', '1')\n            localStorage.removeItem(state.user_localstorage_key)\n        },\n        setProfileInfo({state, dispatch}, params) {\n            let profile = state.profile\n            for (let x in params) {\n                profile[x] = params[x];\n            }\n            state.isVerified = true\n            setLS(state.user_localstorage_key, profile);\n        },\n    },\n\n    getters: {\n        isAuthenticated: state => {\n            return state.isVerified;\n        },\n        userHasModule: (state) => (moduleName) => {\n            return getLS(state.user_localstorage_key)['modules'].hasOwnProperty(moduleName)\n        },\n        isProfileIdForReseller: state => (id) => {\n            if (id) {\n                return id == 5\n            }\n            return false;\n        },\n        isProfileIdForPlatformEmployee: state => (id) => {\n            if (id) {\n                return id == 4\n            }\n            return false;\n        },\n        isProfileIdForCustomer: state => (id) => {\n            if (id) {\n                return id == 6\n            }\n            return false;\n        },\n        isProfileIdForMrt: state => (id) => {\n            if (id) {\n                return id == 7\n            }\n            return false;\n        },\n        isUserRoot: state => {\n            return state.profile.profile_id == 1;\n        },\n        isUserReseller: state => {\n            return state.profile.profile_id == 5;\n        },\n        isUserPlatformEmployee: state => {\n            return state.profile.profile_id == 4;\n        },\n        isUserCustomer: state => {\n            return state.profile.profile_id == 6;\n        },\n        isUserMrt: state => {\n            return state.profile.profile_id == 7;\n        },\n    }\n};\n\nexport default state\n"],"names":["state","namespaced","usersProfiles","user_localstorage_key","profile","token","isVerified","afterLoginPath","usersFusionServers","useLocalModules","modules","mutations","SET_STATE","params","key","value","ADD_MODULES","actions","addModules","commit","setState","async","dispatch","savedProfile","getLS","verifyAPI","r","root","setAfterLoginLocation","location","clearUserData","x","localStorage","removeItem","setItem","setProfileInfo","setLS","getters","isAuthenticated","userHasModule","moduleName","hasOwnProperty","isProfileIdForReseller","id","isProfileIdForPlatformEmployee","isProfileIdForCustomer","isProfileIdForMrt","isUserRoot","profile_id","isUserReseller","isUserPlatformEmployee","isUserCustomer","isUserMrt"],"sourceRoot":""}